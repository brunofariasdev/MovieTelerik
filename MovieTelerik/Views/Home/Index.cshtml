@model MovieAndGenre;
@using Kendo.Mvc
@using static MovieTelerik.Models.Genre
@{
    ViewData["Title"] = "MovieScoreTelerik";
}
<div>
        <!--Modal Create Genre-->
        <form asp-action="CreateGenre" class="modal fade" id="createGenre" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Genres</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div class="modal-body">
                    <div class="form-group">
                       @(Html.Kendo().Grid<MovieTelerik.Models.Genre>(Model.Genres)
                        .Name("Genres")
                        .Columns(columns => {
                            columns.Bound(p => p.Name).Width(60);
                            columns.Command(command => {command.Edit().HtmlAttributes(new {style = "background: #ff8d00;"}); command.Destroy().HtmlAttributes(new {style = "background: red;"});}).Width(60);
                        })
                        .ToolBar(t =>
                        {
                            t.Create().Text("Create Genre");
                
                        })
                        .HtmlAttributes(new { style = "min-height:25rem;" })
                        .DataSource(datasource => datasource
                            .Ajax()
                            .Model(model => {
                                model.Id(p => p.Id);
                                model.Field(p => p.Name).Editable(true);
                            })
                            .Read(read => read.Action("GetAllGenres", "Home"))
                            .Create(data => data.Action("CreateGenre", "Home"))
                            .Update(data => data.Action("UpdateGenre", "Home"))
                            .Destroy(data => data.Action("DeleteGenre", "Home"))
                        )
                        .Scrollable()
                     )
                    </div>
                  </div>
                 
                </div>
            </div>
        </form>

    <div class="k-widget-custom k-tilelayout py-3">
        <div class="k-tilelayout-item k-card k-card-custom" id="tasks-ontrack-template" type="text/html">
            <div style="font-size: 84px; line-height: 101px; color:#F31700">@Model.Movies.Count()</div>
            <div class="k-card-title">Movies</div>
        </div>
        <div class="k-tilelayout-item k-card k-card-custom" id="issues-template" type="text/html">
            <div style="font-size: 84px; line-height: 101px; color:#37B400">@(30 - Model.Movies.Count())</div>
            <div class="k-card-title">Space</div>
        </div>
        <div class="k-tilelayout-item k-card k-card-custom" id="overdue-tasks-template" type="text/html">
            <div style="font-size: 84px; line-height: 101px; color:#FFC000">@Model.GenreCount</div>
            <div class="k-card-title">Genres</div>
        </div>
    </div>
    <div id="container-charts-movie">
        @(Html.Kendo().Chart(Model.Movies)
            .Name("chart")
            .Title("Score Movies").Theme("black")
            .Series(movies => {
                movies.Column(model => model.MetaScore)
                .Name("Movie")
                .Color("#151515");
            })
            .SeriesDefaults(seriesDefaults => seriesDefaults
                .Column().Stack(true)
            )
            .Legend(legend => legend
			    .Position(ChartLegendPosition.Bottom)
			    .Align(ChartLegendAlign.Center)
		    )
            .CategoryAxis(axis => axis.Categories(model => model.Title))
        
        )
    </div>
        @(Html.Kendo().Grid<MovieTelerik.Models.Movie>(Model.Movies)
            .Name("grid")
            .Columns(columns =>
            {
                columns.Select().Width(50);
                columns.Group(group => group
                    .Title("Movie")
                    .Columns(table =>
                    {
                        table.Bound(x => x.UrlImg).ClientTemplate("<span class='movie-img'><img src='"+ "#: UrlImg #" + "'/></span>").Title("Image");
                        table.Bound(x => x.Title).Title("Title");
                        table.Bound(x => x.Resume).Title("Resume");
                        table.Bound(x => x.Genre).Title("Genre").ClientTemplate("#=Genre.Name #");
                        table.Bound(x => x.MetaScore).Title("Score").ClientTemplate("<span class='score k-avatar k-rounded-full k-avatar-lg "+ "#if(MetaScore <= 49 && MetaScore >= 0){#score-red#}if(MetaScore >= 50 && MetaScore <= 74){#score-yellow#}if(MetaScore > 74){#score-green#}#" +"'>"+ "#: MetaScore #" +"</span>");
                        table.Command(command => {command.Edit().HtmlAttributes(new {style = "background: #ff8d00;"}); command.Destroy().HtmlAttributes(new {style = "background: red;"});});
                    })
                );
                
            })
            .ToolBar(t =>
            {
                t.Custom().Text("Genres").HtmlAttributes(new {data_toggle = "modal"}).HtmlAttributes(new {data_target = "#createGenre"}).HtmlAttributes(new {type = "button"});
                t.Create().Text("Create Movie");
                t.Pdf().Text("Export in PDF");
                
            })
            .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("MovieEdit")
            .DisplayDeleteConfirmation("Want delete thant Movie??"))
            .Search(s =>
            {
                s.Field(c => c.Title);
            })
            .Groupable()
            .Sortable()
            .HtmlAttributes(new { style = "height:850px;" })
            .DataSource(datasource => datasource
                .Ajax()
                .Model(model => {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);
                    model.Field(p => p.GenreId).Editable(true);
                    model.Field(p => p.Genre).DefaultValue(ViewData["DefaultGenre"] as MovieTelerik.Models.Genre);
                })
                .Read(read => read.Action("GetAllMovies", "Home"))
                .Create(data => data.Action("CreateMovie", "Home"))
                .Update(data => data.Action("UpdateMovie", "Home"))
                .Destroy(data => data.Action("DeleteMovie", "Home"))
            )
            .Scrollable()
        )

</div>

<style>
    .k-widget-custom{
        display: flex;
        justify-content: space-around;
        width: 100%;
    } 
    .k-grid-content{
        min-height: 20rem;
    }
    .k-card-custom{
        align-items: center;
        justify-content: center;
        width: 10rem;
    }
    .k-master-row:hover{
        background: #8a8b8a7a !important;
        cursor: pointer;
    }

    .card-container{
        background-color: cadetblue;
        color: white;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    #container-charts-movie{
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        background: #151515;
    }
     #container-charts-movie #chart{
         width: 70%;
     }
    .movie-img{
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .movie-img img{
        width: 10rem;
        height: 6rem;
        border: solid white 2px;
        border-radius: 3px;
    }
    .score{
        color: white;
        font-weight: bold;
        font-size: 1.8rem;
    }
    .score-green{
         background-color: lawngreen;
    }
    .score-yellow{
        background-color: #FFCC33;
    }
    .score-red{
        background-color: red;
    }
</style>